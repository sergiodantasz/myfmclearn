== Nat - Definição ==

-- Formas:

data Nat = O | S Nat

-- Construtores:

data Nat
  O : Nat
  S : Nat → Nat

data ListNat
  Nil : ListNat
  Cons : Nat → ListNat → ListNat

data List α
  Nil : List α
  Cons : α → List α → List α

data Bool
  True : Bool
  False : Bool

-- Açúcares:

[] ≡ Nil
(::) ≡ Cons

-- Operações:

(+) : Nat → Nat
n + O = n
n + (S m) = S (n + m)

(·) : Nat → Nat
n · O = O
n · (S m) = (n · m) + n

(^) : Nat → Nat
n ^ O = S O
n ^ (S m) = (n ^ m) · n

-- Ordem de precedência

* Da mais forte para a mais fraca.

(^), (·), (+)

(^) associa à direita.
(·) associa à esquerda.
(+) associa à esquerda.

-- Relações de ordem

n ≤ m ⇐≝⇒ (∃k : Nat)[n + k = m]

-- Funções

double : Nat → Nat
double O = O
double (S n) = S (S (double n))

fib : Nat → Nat
fib O = O
fib (S O) = S O
fib (S (S n)) = fib (S n) + fib n

length : List α → Nat
length [] = 0
length (x :: xs) = S (length xs)

(⧺) : List α → List α → List α
[] ⧺ xs = xs
(x :: xs) ⧺ ys = x :: (xs ⧺ ys)

reverse : List α → List α
reverse [] = []
reverse (x :: xs) = reverse xs ⧺ [x]

-- Teoremas e Lemas

☑ (+)-ass : (∀a,b,c)[a + (b + c) = (a + b) + c]
☑ (+)-com : (∀a,b)[a + b = b + a]
☑ (·)-ass : (∀a,b,c)[(a · b) · c = a · (b · c)]
☑ (·)-distL-(+) : (∀d,x,y)[d · (x + y) = d · x + d · y]
☑ 0-idL-(·) : (∀n)[0 · n = 0]
☑ succ_mul : (∀n,m)[Sn · m = n · m + m]
☑ (·)-com : (∀a,b)[a · b = b · a]
☑ 1-id-(·) : (∀x)[x · S0 = x = S0 · x]
☑ LExp1 : (∀x,a,b)[x ^ (a + b) = x ^ a · x ^ b]
☑ LExp2 : (∀x,a,b)[x ^ (a · b) = (x ^ a) ^ b]
☑ LExp3 : (∀n)[S0 ^ n = S0]

☑ Λ0 : (∀a)(∀b)[Sa + b = a + Sb]
☑ Λ1 : (∀xs,ys : List α)[reverse (xs ⧺ ys) = reverse xs ⧺ reverse ys]
☑ Λ2 : (∀xs : List α)[xs ⧺ [] = xs]
☑ Λ3 : (∀xs,ys,zs : List α)[(xs ⧺ ys) ⧺ zs = xs ⧺ (ys ⧺ zs)]
☑ Λ4 : (∀x : α)[reverse [x] = [x]]
