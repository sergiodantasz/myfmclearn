======== Nat - Definição ========

-- Formas:

data Nat = O | S Nat

-- Construtores:

data Nat
  O : Nat
  S : Nat → Nat

data List α
  Nil : List α
  Cons : α → List α → List α

data List Nat
  Nil : List Nat
  Cons : Nat → List Nat → List Nat

data Bool
  True : Bool
  False : Bool

data Unit
  ⛤ : Unit

data Empty

-- Açúcares:

[] ≡ Nil
(::) ≡ Cons

-- Operações:

(+) : Nat → Nat
n + O = n
n + (S m) = S (n + m)

(·) : Nat → Nat
n · O = O
n · (S m) = (n · m) + n

(^) : Nat → Nat
n ^ O = S O
n ^ (S m) = (n ^ m) · n

-- Ordem de precedência

* Da mais forte para a mais fraca.

(^), (·), (+)

(^) associa à direita.
(·) associa à esquerda.
(+) associa à esquerda.

-- Relações de ordem

n ≤ m ⇐≝⇒ (∃k : Nat)[n + k = m]

-- Funções

double : Nat → Nat
double O = O
double (S n) = S (S (double n))

fib : Nat → Nat
fib O = O
fib (S O) = S O
fib (S (S n)) = fib (S n) + fib n

head : List α ⇀ α
head (x :: xs) = x

tail : List α ⇀ List α
tail (x :: xs) = xs

null : List α → Bool
null [] = True
null xs = False

length : List α → Nat
length [] = 0
length (x :: xs) = S (length xs)

sum : List Nat → Nat
sum [] = 0
sum (n :: ns) = n + sum ns

product : List Nat → Nat
product [] = 1
product (n :: ns) = n · product ns

(⧺) : List α → List α → List α
[] ⧺ xs = xs
(x :: xs) ⧺ ys = x :: (xs ⧺ ys)

reverse : List α → List α
reverse [] = []
reverse (x :: xs) = reverse xs ⧺ [x]

map : (α → β) → List α → List β
map f [] = []
map f (x :: xs) = f x :: map f xs

filter : (α → Bool) → List α → List α
filter p [] = []
filter p (x :: xs)
  | p x = x :: filter p xs
  | otherwise = filter p xs

take : Nat → List α → List α
take 0 xs = []
take n [] = []
take (S n) (x :: xs) = x :: take n xs

drop : Nat → List α → List α
drop 0 xs = xs
drop n [] = []
drop (S n) (x :: xs) = drop n xs

(!!) :: List α ⇀ Nat ⇀ α
(x :: xs) !! 0 = x
(x :: xs) !! (S n) = xs !! n

-- Teoremas e Lemas

☑ (+)-ass : (∀a,b,c)[a + (b + c) = (a + b) + c]
☑ (+)-com : (∀a,b)[a + b = b + a]
☑ (·)-ass : (∀a,b,c)[(a · b) · c = a · (b · c)]
☑ (·)-distL-(+) : (∀d,x,y)[d · (x + y) = d · x + d · y]
☑ 0-idL-(·) : (∀n)[0 · n = 0]
☑ succ_mul : (∀n,m)[Sn · m = n · m + m]
☑ (·)-com : (∀a,b)[a · b = b · a]
☑ 1-id-(·) : (∀x)[x · S0 = x = S0 · x]
☑ LExp1 : (∀x,a,b)[x ^ (a + b) = x ^ a · x ^ b]
☑ LExp2 : (∀x,a,b)[x ^ (a · b) = (x ^ a) ^ b]
☑ LExp3 : (∀n)[S0 ^ n = S0]
☑ (⧺)-pres-length : (∀xs,ys : List α)[length (xs ⧺ ys) = length xs + length ys]
☑ (∀xs : List α)[reverse (reverse xs) = xs]
☑ reverse-pres-length : (∀xs : List α)[length (reverse xs) = length xs]
☑ (∀p : α → Bool)(∀xs,ys : List α)[filter p (xs ⧺ ys) = filter p xs ⧺ filter p ys]
☑ (f : α → β)(∀xs,ys : List α)[map f (xs ⧺ ys) = map f xs ⧺ map f ys]

☑ Λ0 : (∀n,m)[Sn + m = n + Sm]
☑ Λ1 : (∀xs,ys : List α)[reverse (xs ⧺ ys) = reverse xs ⧺ reverse ys]
☑ Λ2 : (∀xs : List α)[xs ⧺ [] = xs]
☑ Λ3 : (∀xs,ys,zs : List α)[(xs ⧺ ys) ⧺ zs = xs ⧺ (ys ⧺ zs)]
☑ Λ4 : (∀x : α)[reverse [x] = [x]]

